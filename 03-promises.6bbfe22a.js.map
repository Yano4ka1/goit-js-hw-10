{"mappings":"gfAWA,IAAAA,EAAAC,EAAA,SA6BA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,YAEnBA,MAIP,SAASQ,EAAiBC,G,IAAEV,EAAFU,EAAEV,SAAUC,EAAZS,EAAYT,MACpCJ,EAAAc,OAAOC,QAAQ,uBAAwCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,OAG/D,SAASa,EAAeJ,G,IAAEV,EAAFU,EAAEV,SAAUC,EAAZS,EAAYT,MAClCJ,EAAAc,OAAOI,QAAQ,sBAAqCF,OAAfb,EAAS,QAAYa,OAANZ,EAAM,QA9C/C,CACXe,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAE3B,SAAkBC,GAChBA,EAAIC,iBAYJ,IAVA,IAMcC,EAAVF,EAAIG,OALNC,SACEvB,EAAKqB,EAALrB,MACAwB,EAAIH,EAAJG,KACAC,EAAMJ,EAANI,OAIAC,EAAeC,OAAO3B,EAAM4B,OAEvBC,EAAI,EAAGA,GAAKJ,EAAOG,MAAOC,GAAK,EACtC/B,EAAc+B,EAAGH,GAAcI,KAAKtB,GAAkBuB,MAAMlB,GAC5Da,GAAgBC,OAAOH,EAAKI,OAG9BT,EAAIG,OAAOU,W","sources":["src/js/03-promises.js"],"sourcesContent":["// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position,\n// delay) стільки разів, скільки ввели в поле amount. \n// Під час кожного виклику передай їй номер промісу (position), що створюється, \n//і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, \n// який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт,\n// в якому будуть властивості position і delay зі значеннями однойменних параметрів. \n// Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - \n// виконати або відхилити.\n\nimport {Notify} from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form')\n}\n\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evn) {\n  evn.preventDefault();\n\n  const {\n    elements: {\n      delay,\n      step,\n      amount,\n    }\n  } = evn.target;\n\n  let promiseDelay = Number(delay.value);\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, promiseDelay).then(onPromiseSuccess).catch(onPromiseError)\n    promiseDelay += Number(step.value);\n  }\n\n  evn.target.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay})\n      } else {\n        reject({position, delay})\n      }\n    }, delay)\n  })\n}\n\nfunction onPromiseSuccess({ position, delay }) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`); \n}\n\nfunction onPromiseError({ position, delay }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$onPromiseSuccess","param","Notify","success","concat","$ce04d3a99e08e73b$var$onPromiseError","failure","form","document","querySelector","addEventListener","evn","preventDefault","_elements","target","elements","step","amount","promiseDelay","Number","value","i","then","catch","reset"],"version":3,"file":"03-promises.6bbfe22a.js.map"}